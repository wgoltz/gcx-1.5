/* implement text entry with history */
static void set_combo_text_with_history(GtkWidget *widget, char *val)
{
    GtkEntry *entry = g_object_get_data(G_OBJECT (widget), "entry");
    gtk_entry_set_text(entry, val);

    // update history
    GtkTreeModel *history = gtk_combo_box_get_model(GTK_COMBO_BOX (widget));

    GtkTreeIter iter;
    if (gtk_tree_model_get_iter_first(history, &iter)) {
        for (;;) {
            gchar *str;
            gtk_tree_model_get(history, &iter, 0, &str, -1);
            if (! str && ! str[0]) break;

            gboolean in_history = (strcmp(str, val) == 0);
            g_free(str);

            if (in_history) {
                gtk_list_store_remove(GTK_LIST_STORE (history), &iter);
                break;
            }

            if (! gtk_tree_model_iter_next(history, &iter)) break;
        }
    }

    gtk_list_store_prepend(GTK_LIST_STORE (history), &iter);
    gtk_list_store_set(GTK_LIST_STORE (history), &iter, 0, val, -1);
}

static GtkWidget *create_combo_text_with_history(char *val)
{
    GtkListStore *history = gtk_list_store_new(1, G_TYPE_STRING);

    GtkWidget *widget = gtk_combo_box_new_with_model_and_entry(GTK_TREE_MODEL (history));
    g_object_unref(history); // now owned by widget

    GtkCellRenderer *renderer = gtk_cell_renderer_combo_new();
    g_object_set(renderer, "has_entry", TRUE, "model", history, "text-column", 0, NULL);

    gtk_combo_box_set_entry_text_column(GTK_COMBO_BOX (widget), 0);

    // entry is the displayed value
    GtkWidget *entry = gtk_bin_get_child(GTK_BIN (widget));
    g_object_ref(entry);
    g_object_set_data_full(G_OBJECT (widget), "entry", entry, (GDestroyNotify)g_object_unref); // quick access to entry widget

    gtk_entry_set_text(GTK_ENTRY (entry), val);

    // set first history value
    GtkTreeIter iter;
    gtk_list_store_prepend(history, &iter);
    gtk_list_store_set(history, &iter, 0, val, -1);

    return widget;
}

